let fs,shell,DIRECTORIES;_3d1‍.x([["makeGulpfileJs",()=>makeGulpfileJs]]);_3d1‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_3d1‍.w("shelljs",[["default",["shell"],function(v){shell=v}]]);_3d1‍.w("../main",[["DIRECTORIES",["DIRECTORIES"],function(v){DIRECTORIES=v}]]);





       const makeGulpfileJs = async options => {
  const gulpfile = `
/**********************************************************/
/* gulp task */
/**********************************************************/
/* File version              1.0                      */
/* Last modified            2019/11/21                   */
/* Last modified by          yohan                         */
/**********************************************************/

const gulp = require('gulp'),
  shell = require("shelljs");
const {
  watch
} = require('gulp');
const path = require('path');
const baseDir = path.resolve(process.cwd());

const rootFolder = path.join(baseDir, ${options.presentation})

//gulp로 shared파일 자동 생성

gulp.task("watch", function () {
    watch(baseDir + "/shared/**/*", gulp.series("gen-shared", done => done()));
});

gulp.task("gen-shared", function(done) {
  shell.ls(rootFolder).forEach(presentation => {
    shell.cd(rootFolder);
    shell.cp("-Rf", baseDir + "/shared", presentation);
  });
  done();
});
gulp.task("default", gulp.series("gen-shared"));
`;
  _3d1‍.a("shell",shell).cd(_3d1‍.a("DIRECTORIES",DIRECTORIES).rootDir);
  _3d1‍.a("fs",fs).writeFileSync('gulpfile.js', gulpfile, 'utf8', err => _3d1‍.g.console.log(err))
};_3d1‍.j(["makeGulpfileJs"]);

const getPresentation = (options) => {
  let presentation = [];
  if (options.seperate) {
    presentation.push(`${options.presentation}_MAIN`)
    presentation.push(`${options.presentation}_ADD`)
  } else {
    presentation.push(`${options.presentation}`)
  }
  presentation = presentation.map(el => {
    el = `'${el}'`;
    return el
  });
  _3d1‍.g.console.log(presentation)
  return presentation;
}